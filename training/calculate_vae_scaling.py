#!/bin/env python

"""
Normal people shouldnt need this routine.
This is a crude tool to show an estimation of whether 
the VAE scaling factor is where it should be.
Generally speaking, it should be scaled so that values are roughly |1.0|
However, unless you are calculating over a VERY large, VERY varied dataset,
the results will not be canonical.
Usually this just shows  you the right ballpark.
IE: "Should I use SD vae scaling, or SDXL scaling?"

It expects latent files generated by create_img_sdXXX

"""

import sys
import glob
import random
import torch
import safetensors.torch as st
import numpy as np
import os

def main():
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <latent_dir> <file_extension>")
        print(f"Example: {sys.argv[0]} ./latents .safetensors")
        sys.exit(1)

    LATENT_DIR = sys.argv[1]
    FILE_EXT = sys.argv[2]
    N_SAMPLES = 20
    TARGET_STD = 0.99  #1.0

    pattern = os.path.join(LATENT_DIR, f"*{FILE_EXT}")
    latent_files = glob.glob(pattern)
    if not latent_files:
        print(f"No {FILE_EXT} files found in {LATENT_DIR}")
        sys.exit(1)

    samples = random.sample(latent_files, min(N_SAMPLES, len(latent_files)))
    all_norms = []
    all_stds = []
    for f in samples:
        latent = st.load_file(f)["latent"]
        latent = latent.float()
        norm = latent.norm().item()
        std = latent.std().item()
        all_norms.append(norm)
        all_stds.append(std)

    mean_norm = np.mean(all_norms)
    mean_std = np.mean(all_stds)

    print(f"Checked {len(samples)} samples from {LATENT_DIR} ({FILE_EXT})")
    print(f"Mean latent norm: {mean_norm:.4f}")
    print(f"Mean latent std: {mean_std:.4f}")

    expected_std_after = TARGET_STD
    recommended_scaling = expected_std_after / mean_std

    print(f"Using target std ~{expected_std_after:.3f} (after scaling)")
    print(f"\nRecommended scaling factor: {recommended_scaling:.5f}")

    if abs(mean_std - expected_std_after) > 0.01:
        print(f"To match SD1.5 expectations, multiply your cached latents by {recommended_scaling:.5f} before feeding to UNet.")
    else:
        print("Your latents are already at the correct scale for SD1.5 UNet.")

if __name__ == "__main__":
    main()
